ggplot(data=babies_non_na, aes(weight_mom))+
geom_bar() + ggtitle("Mom's weight")
ggplot(data=babies_non_na, aes(week))+
geom_bar() + ggtitle("No. of weeks pregnant")
avg_weight_baby<-mean(babies_non_na$baby_wgt)
avg_weight_baby
avg_height_mom<-mean(babies_non_na$height_mom)
avg_height_mom
avg_weight_mom<-mean(babies_non_na$weight_mom)
avg_weight_mom
avg_no_of_weeks<-mean(babies_non_na$week)
avg_no_of_weeks
library(ggplot2)
ggplot(babies_non_na, aes(x=week, y=baby_wgt))+
geom_point()+
geom_smooth(method=lm)
library(ggplot2)
ggplot(babies_non_na, aes(x=week, y=baby_wgt))+
geom_point()+
geom_smooth(method=lm, se=F)
f <- lm(mpg ~ hp+disp+wt, data=mtcars1)
library(ERSA)
exploreReg(f, tablesOnly=T)
mtcars1<-mtcars
f <- lm(mpg ~ hp+disp+wt, data=mtcars1)
library(ERSA)
exploreReg(f, tablesOnly=T)
library(ERSA)
??ersa
install.packages("devtools")
library(ERSA)
mosaic<-library(mosaicData)
mosaic
??mosaicdata
?mosaicdata
mosaicData::Birthdays
mosaicData::Births2015
houses<-mosaicData::SaratogaHouses
houses
houses1<-houses[houses$price & houses$rooms]
houses1<-houses[houses$price & houses$rooms,]
houses1
library(tidyverse)
View(houses)
houses<-houses %>% select(1,10,2,5,6)
View(houses)
lm(price~.,data=houses)
f<-lm(price~.,data=houses)
summary(f)
summary(f)
swiss<-swiss
View(swiss)
swiss<-swiss %>% select(6,1,2,4)
View(swiss)
f<-lm(Infant.Mortality~ ., data=swiss)
summary(f)
f1<-lm(Infant.Mortality~Fertility+Education,data=swiss)
summary(f1)
summary(f)
summary(f1)
summary(f)
p<- predict(f,new, interval=”confidence”)
new<-data.frame(Fertility=70.4,Agriculture=54.1,Education=8.00)
p<- predict(f,new, interval=”confidence”)
View(f)
View(new)
p<- predict(f,new, interval="confidence")
p
sqrt(0.2405)
0.99^2
0.1^2
rock
f<-lm(perm~., data=rock)
f1<-lm(perm~peri+shape,data=rock)
f2<-lm(perm~shape)
f<-lm(perm~., data=rock)
f1<-lm(perm~peri+shape,data=rock)
f2<-lm(perm~shape, data=rock)
mod1<-lm(perm~., data=rock)
mod2<-lm(perm~peri+shape,data=rock)
mod3<-lm(perm~shape, data=rock)
summary(mod2)
summary(mod3)
summary(mod3)
anova(mod1,mod3)
summary(mod1)
0.000000007936
plant<-PlantGrowth
View(plant)
fp<-lm(weight~.,data=plant)
fp
summary(fp)
library(leaps)
install.packages("leaps")
library(leaps)
allfits<-regsubsets(weight~.,data=plant)
summary(allfits)$which
summary(fp)
5.0320-0.3710
fp1<-lm(weight~group,data=plant)
fp1
summary(fp1)
x = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50)
y= c(-6.02, 17.42, 113.66, 45.9, 55.34, 141, 84.53, 4.32, 39.18, 57.05, 146.2, 108.52, 115.96, 106.7, 78.49, 200.6, 140.97, 22.44, 160.39, 106.09, 80.61, 127.23, 90.82, 109.53, 118.43, 68.92, 198.57, 167.64, 106.21, 228.82, 190.32, 156.98, 219.08, 220.68, 220.16, 215.68, 210.98, 182.07, 171.62, 169.51, 155.26, 180.93, 129.25, 302.02, 254.88, 139.09, 175.74, 173.04, 235.72, 192.76, 209.67)
df<-data.frame(x,y)
View(df)
f5<-lm(y~I(x^2),data=df)
summary(f5)
f6<-lm(y~poly(x,2),data=df)
summary(f6)
f6<-lm(y~poly(x,2),data=df)
f7<-lm(y~poly(x,3),data=df)
f8<-lm(y~poly(x,4),data=df)
summary(f6)
summary(f7)
anova(f7)
anova(f6)
103182-103864
summary(f6)
f6a<-lm(y~x+I(x^2),data=df)
summary(f6a)
f7<-lm(y~x+I(x^2)+I(x^3),data=df)
summary(f7)
f8<-lm(y~x+I(x^2)+I(x^3)+I(x^4),data=df)
summary(f8)
f6a<-lm(y~x+I(x^2),data=df)
summary(f6a)
summary(f6a)
anova(f7)
anova(f6a)
103182-103864
f8<-lm(y~x+I(x^2)+I(x^3)+I(x^4),data=df)
summary(f8)
31.5905885 -0.0001564
summary(f8)
sqrt(0.5754)
anova(f6)
head(iris)
d<- iris[,1:4]
View(d)
pc <- princomp(d, cor=TRUE, score = TRUE)
summary(pc)
plot(pc)
plot(pc, type="l")
biplot(pc)
attributes(pc)
pc$loadings
pc$scores
s <-c(6.92,4.71,2.95,2.74,1.49)
v <- s^2
v[1]/sum(v)
v[1]+v[2]/sum(v)
(v[1]+v[2])/sum(v)
cars <- MPG
?mpg
??mpg
library(ggplot2)
cars <- mpg
View(cars)
View(cars)
cars_sub <- cars[cars$class == 'subcompact']
cars_sub <- cars[cars$class = 'subcompact']
cars_sub <- cars[cars$class == 'subcompact',]
View(cars_sub)
cars_2_seat <- cars[cars$class == '2seater']
cars_2_seat <- cars[cars$class == '2seater',]
f<-lm(class~city+hwy, data=cars_sub)
f<-lm(class~cty+hwy, data=cars_sub)
cars_cty <- cars[cars$fl == 'cty',]
f <- lm(class~cty+hwy)
f <- lm(class~cty+hwy data=cars)
f <- lm(class~cty+hwy, data=cars)
f <- lm(class ~ cty + hwy, data=cars)
cars$class <- as.factor(cars$class)
f <- lm(class ~ cty + hwy, data=cars)
f
cars_sub <- cars[cars$class == 'subcompact',]
cars_2_seat <- cars[cars$class == '2seater',]
f <- lm(class ~ cty + hwy, data=cars_sub)
f
cars <- mpg
cars_sub <- cars[cars$class == 'subcompact',]
cars_2_seat <- cars[cars$class == '2seater',]
f <- lm(class ~ cty + hwy, data=cars_sub)
summary(cars)
summary(cars)
cars$cty <- as.numeric(cars$cty)
cars$hwy <- as.numeric(cars$hwy)
f <- lm(class ~ cty + hwy, data=cars_sub)
cars$class <- as.factor(cars$class)
cars_sub <- cars[cars$class == 'subcompact',]
cars_2_seat <- cars[cars$class == '2seater',]
f <- lm(class ~ cty + hwy, data=cars_sub)
cars$hwy <- as.integer(cars$hwy)
cars$cty <- as.integer(cars$cty)
f <- lm(class ~ cty + hwy, data=cars_sub)
cars_sub <- cars[cars$class == 'subcompact',]
f <- lm(class ~ cty + hwy, data=cars_sub)
summary(cars_sub)
summary(cars)
cars <- mpg
summary(cars)
f <- lm(class ~ cty, data=cars_sub)
f <- lm(cty ~ class, data=cars_sub)
f <- lm(cty ~ class, data=cars)
f
cars_sub <- cars[cars$class == 'subcompact' & cars$class == '2seater',]
cars_sub_2seater <- cars[cars$class == 'subcompact' & cars$class == '2seater',]
cars_sub_2seater <- cars[cars$class == 'subcompact' && cars$class == '2seater',]
cars_sub_2seater <- cars[(cars$class == 'subcompact' & cars$class == '2seater'),]
cars_sub_2seater <- cars[(cars$class == 'subcompact' | cars$class == '2seater'),]
View(cars_sub_2seater)
View(cars_2_seat)
f <- lm(cty ~ class, data=cars_sub_2seater)
f
View(cars)
f1 <- lm(hwy ~ class, data=cars_sub_2seater)
f1
cars <- mpg
summary(cars)
cars_sub_2seater <- cars[(cars$class == 'subcompact' | cars$class == '2seater'),]
f <- lm(cty ~ class, data=cars_sub_2seater)
f
f1 <- lm(hwy ~ class, data=cars_sub_2seater)
f1
summary(f)
summary(f1)
f <- lm(cty ~ class, data=cars)
summary(f)
f1 <- lm(hwy ~ class, data=cars)
summary(f1)
View(cars_2_seat)
cars_sub <- cars[cars$class == 'subcompact',]
cars_2seater <- cars[cars$class == '2seater',]
rm("cars_2_seater")
rm(cars_2_seater)
rm(cars_2_seat)
rm(cars_cty)
m1<-c(mean(cars_sub$cty),mean(cars_sub$hwy)
m1<-c(mean(cars_sub$cty),mean(cars_sub$hwy))
m1<-mean(cars_sub$cty)
m2<-mean(cars_sub$hwy)
m3<-mean(cars_2seater$cty)
m4<-mean(cars_2seater$hwy)
table(c(m1,m2,m3,m4))
x<-c(m1,m2)
y<-x(m3,m4)
table(x,y)
y<-c(m3,m4)
table(x,y)
data.frame(x,y)
subcompact<-c(m1,m2)
2_seater<-c(m3,m4)
two_seater<-c(m3,m4)
data.frame(subcompact,two_seater)
df<- data.frame(subcompact,two_seater)
rownames(df, c('cty','hwy'))
df
rownames(df)<- c('cty','hwy'))
rownames(df)<- c('cty','hwy')
df
View(cars_sub)
mx<-sapply(mean, cars_sub[8:9,])
mx<-sapply(cars_sub[8:9,],mean)
?sapply
mx<-lapply(cars_sub[8:9,],mean)
View(mx)
mx<-lapply(cars_sub[,8:9],mean)
View(mx)
my<-lapply(cars_2seater[,8:9],mean)
mx<-lapply(c(cars_sub[,8:9],cars_2seater[,8:9]),mean)
View(mx)
data.frame(mx)
table(mx)
df<-data.frame(mx)
colnames(df)<- c('sub_cty','sub_hwy','2seater_cty','2seater_hwy')
df
ggplot(cars_sub_2seater, aes(x=cty, y=hwy))+
geom_boxplot() +
facet_wrap(class)
View(cars_sub_2seater)
ggplot(cars_sub_2seater, aes(x=cty, y=hwy))+
geom_boxplot()
ggplot(cars_sub_2seater, aes(x=cty))+
geom_boxplot() +
facet_wrap(class)
ggplot(cars_sub_2seater, aes(x=cty))+
geom_point() +
facet_wrap(class)
ggplot(cars_sub_2seater, aes(x=cty))+
geom_violin() +
facet_wrap(class)
ggplot(cars, aes(x=cty))+
geom_violin() +
facet_wrap(class)
ggplot(cars, aes(x=cty))+
geom_violin()
ggplot(cars, aes(x=cty,y=hwy))+
geom_violin()
ggplot(cars, aes(x=class))+
geom_boxplot() +
facet_wrap(cty,hwy)
ggplot(cars, aes(x=class))+
geom_boxplot() +
facet_wrap(cty)
ggplot(cars, aes(x=cty))+
geom_boxplot() +
facet_wrap(class)
View(cars)
ggplot(cars_sub_2seater, aes(x=cty))+
geom_boxplot() +
facet_wrap(class)
ggplot(cars_sub_2seater, aes(y=cty))+
geom_boxplot() +
facet_wrap(class)
ggplot(cars_sub_2seater, aes(x=hwy,y=cty))+
geom_point() +
facet_wrap(class)
ggplot(cars_sub_2seater, aes(x=hwy,y=cty))+
geom_point()
ggplot(cars_sub_2seater, aes(x=hwy,y=cty))+
geom_point(color=class)
?ggplot
ggplot(cars_sub_2seater, aes(x=hwy,y=cty, colour=class))+
geom_point()
ggplot(cars_sub_2seater, aes(x=hwy,y=cty, colour=class))+
geom_point() +
ggtitle("cty vs hwy showing the two car classes")
setwd('~/Downloads/')
#read in the data
links <- read.csv("ml-latest-small/links.csv")
movies <- read.csv("ml-latest-small/movies.csv")
ratings <- read.csv("ml-latest-small/ratings.csv")
install.packages("reshape2", dependencies = T)
install.packages("reshape2", dependencies = T)
install.packages("stringi", dependencies = T)
library(reshape2)
library(stringi)
View(links)
View(movies)
View(ratings)
tags <- read.csv("ml-latest-small/tags.csv")
View(tags)
ratingmat = dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
ratingmat
#now remove the userID so we have a movie ratings ID matrix
ratingmat <- as.matrix(ratingmat[,-1])
#now remove the userID so we have a movie ratings ID matrix
ratingmat <- as.matrix(ratingmat[,-1])
ratingmat
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
#now remove the userID so we have a movie ratings ID matrix
ratingmat <- as.matrix(ratingmat[,-1])
ratingmat
install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
ratingmat <- as(ratingmat, "realRatingMatrix")
ratingmat
ratingmat <- normalize(ratingmat)
ratingmat
rec_mod <- Recommender(ratingmat, method = "UBCF", param = list(method = "Cosine", nn = 10))
rec_mod
#obtain some predictions
Top_5_pred <- predict(rec_mod, ratingmat[1], n = 5) #pred for first user
Top_5_List <- as(Top_5_pred,"list")
Top_5_List
Top_5_df = data.frame(Top_5_List)
colnames(Top_5_df) = "movieId"
Top_5_df
Top_5_df$movieId <- as.numeric(levels(Top_5_df$movieId))
summary(Top_5_df)
str(Top_5_df)
Top_5_df$movieId <- as.integer(Top_5_df$movieId)
str(Top_5_df)
Top_5_df$movieId <- as.numeric(levels(Top_5_df$movieId))
Top_5_df$movieId
levels(Top_5_df$movieId)
library(dplyr)
names <- left_join(Top_5_df, movies, by = "movieID")
Top_5_df
movies
names <- left_join(Top_5_df, movies, by = "movieId")
names
setwd("~/Downloads")
movies <- read.csv("/IMDB-Dataset/movies.csv")
setwd("~/Desktop/Recommendation_systems")
movies <- read.csv("movies.csv")
ratings <- read.csv("ratings.csv")
head(movies)
head(ratings)
head(movies)
head(ratings)
str(movies)
str(ratings)
250/50000
50000*0.02
50000*0.2
10000*0.15
100000*0.15
str(movies)
str(movies)
str(ratings)
summary(movies)
summary(ratings
summary(movies)
summary(movies)
summary(ratings)
head(movies)
head(movies$genres)
#create new dataframe just comprised of the genres column
movie_genres <- data.frame(movies$genres, stringsAsFactors = F)
movie_genres
library(data.table)
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
?tstrsplit
#now split the column using the `|` delimiter
#note tstrsplit is the equivalent to: transpose(strsplit(x))
movie_genres2 <- data.frame(tstrsplit(movie_genres[,1], '[|]', type.convert = T), stringsAsFactors = F)
movie_genres2
colnames(movie_genres2) <- c(1:10)
movie_genres2
levels(movie_genres2)
levels(movies)
levels(movies$genres)
movie_genres2
genres <- c("Action", "Adventure", "Animation", "Children", "Comedy", "Crime","Documentary", "Drama", "Fantasy", "Film-Noir", "Horror", "Musical", "Mystery","Romance", "Sci-Fi", "Thriller", "War", "Western")
genre_mat <- matrix(0,10330,18)
genre_mat
genre_mat[1,] <- genres
genre_mat
colnames(genre_mat) <- genres
genre_mat
for (index in 1:nrow(movie_genres2)) {
for(col in 1:ncol(movie_genres2)) {
genre_col = which(genre_mat[1,] == movie_genres2[index,col])
genre_mat[index+1,genre_col] <- 1
}
}
genre_mat
genre_mat1 <- as.data.frame(genre_mat[-1,], stringsAsFactors = F)
col
for(col in 1:ncol(genre_mat1)) {
genre_mat1[,col] <- as.integer(genre_mat1[,col])
}
head(genre_mat1)
str(genre_mat1)
View(movie_genres2)
which(genre_mat[1,] == movie_genres2[index,col]
1
which(genre_mat[1,] == movie_genres2[index,col]
)
genre_mat
genre_mat1
for(col in 1:ncol(genre_mat1)) {
genre_mat1[,col] <- as.integer(genre_mat1[,col])
}
head(genre_mat1)
str(genre_mat1)
movie_data[,1:2]
movies[,1:2]
genre_mat1[]
movies[,1:2]
search_mat <- cbind(movies[,1:2], genre_mat1[])
head(search_mat)
genre_mat1[]
search_mat <- cbind(movies[,1:2], genre_mat1[])
head(search_mat)
?dcast
View(ratings)
#dcast is a long to wide tool in data.table
rating_mat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=F)
#dcast is a long to wide tool in data.table
rating_mat <- reshape2::dcast(ratings, userId~movieId, value.var = "rating", na.rm=F)
rating_mat
rating_mat <- as.matrix(rating_mat[,-1]) #get rid of UserId column
#now we transform this matrix into recommenderlab realRatingMatrix
rating_mat <- as(rating_mat, "realRatingMatrix")
rating_mat
recommend <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
names(recommend)
?recooooooooooooooooooo
?Recommender
?as
?recommenderlab
??recommenderlab
??realRatingMatrix
lapply(recommend, "[[", "description")
#view the parameters of ICBF matrix
recommend$IBCF_realRatingMatrix$parameters
sim_mat <- similarity(rating_mat[1:4,],
method = "cosine",
which = "users")
as.matrix(sim_mat)
rating_mat
View(rating_mat)
image(as.matrix(sim_mat), main = "User Similarity")
movie_sim <- similarity(rating_mat[,1:4], method = "cosine", which = "items")
movie_sim <- similarity(rating_mat[,1:4], method = "cosine", which = "items")
as.matrix(movie_mat)
movie_sim <- similarity(rating_mat[,1:4], method = "cosine", which = "items")
as.matrix(movie_sim)
image(as.matrix(movie_sim), main = "Movie Similarity")
rating_values <- as.vector(rating_mat@data)
unique(rating_values)
table(rating_values)
rating_mat@data
unique(rating_values)
ratings_table <- table(rating_values)
ratings_table
